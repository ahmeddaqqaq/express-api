generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model user {
  id           String   @id @default(uuid())
  name         String
  mobileNumber String   @unique
  password     String
  role         UserRole
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  // Relations
  uploadedImages Image[]
  createdTransactions Transaction[] @relation("CreatedByUser")
  salesRecords SalesRecord[]
}

model Image {
  id              String             @id @default(uuid())
  key             String             @unique
  url             String
  isActive        Boolean            @default(true)
  uploadedAtStage TransactionStatus? // Track which stage the image was uploaded in
  uploadedBy      user?              @relation(fields: [uploadedById], references: [id])
  uploadedById    String?
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt

  // Relations
  transactions Transaction[] @relation("TransactionImages")
}

model Customer {
  id           String        @id @default(uuid())
  fName        String
  lName        String
  mobileNumber String        @unique
  cars         Car[]
  count        Int           @default(0)
  isActive     Boolean       @default(true)
  isBlacklisted Boolean      @default(false)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  transactions Transaction[]
}

model Car {
  id           String        @id @default(uuid())
  brand        Brand         @relation(fields: [brandId], references: [id])
  brandId      String
  customer     Customer      @relation(fields: [customerId], references: [id])
  customerId   String
  model        Model         @relation(fields: [modelId], references: [id])
  modelId      String
  plateNumber  String
  year         String?
  color        String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  transactions Transaction[]
}

model Brand {
  id        String   @id @default(uuid())
  name      String   @unique
  logoUrl   String?
  models    Model[]
  cars      Car[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  imageId   String?  @unique
}

model Model {
  id        String   @id @default(uuid())
  name      String
  brand     Brand    @relation(fields: [brandId], references: [id])
  brandId   String
  type      CarType  @default(Sedan)
  cars      Car[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([brandId, name])
}

model Transaction {
  id           String                 @id @default(uuid())
  status       TransactionStatus      @default(scheduled)
  isPaid       Boolean                @default(false)
  isPulled     Boolean                @default(false)
  customer     Customer               @relation(fields: [customerId], references: [id])
  customerId   String
  car          Car                    @relation(fields: [carId], references: [id])
  carId        String
  service      Service                @relation(fields: [serviceId], references: [id])
  serviceId    String
  images       Image[]                @relation("TransactionImages")
  addOns       AddOn[]
  technicians  Technician[]
  invoice      Invoice?
  deliverTime  String?
  notes        String?
  OTP          String?
  createdAt    DateTime               @default(now())
  updatedAt    DateTime               @updatedAt
  createdByUser    user?       @relation("CreatedByUser", fields: [createdByUserId], references: [id])
  createdByUserId  String?
  auditLogs    AuditLog[]
  assignments  TechnicianAssignment[]
  salesRecords SalesRecord[]
  posOrder     PosOrder?
}

model Service {
  id           String         @id @default(uuid())
  name         String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  transactions Transaction[]
  prices       ServicePrice[]
}

model ServicePrice {
  id           String   @id @default(uuid())
  service      Service  @relation(fields: [serviceId], references: [id])
  serviceId    String
  carType      CarType
  price        Float
  posServiceId Int
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@unique([serviceId, carType])
}

model Technician {
  id           String                 @id @default(uuid())
  status       Boolean                @default(true)
  fName        String
  lName        String
  transactions Transaction[]
  createdAt    DateTime               @default(now())
  updatedAt    DateTime               @updatedAt
  auditLog     AuditLog[]
  shifts       Shift[]
  assignments  TechnicianAssignment[]
}

model Shift {
  id            String     @id @default(uuid())
  technician    Technician @relation(fields: [technicianId], references: [id])
  technicianId  String
  date          DateTime   @db.Date
  startTime     DateTime?
  endTime       DateTime?
  breakStart    DateTime?
  breakEnd      DateTime?
  overtimeStart DateTime?
  overtimeEnd   DateTime?
  shiftType     ShiftType  @default(REGULAR)
  hourlyRate    Float?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  @@unique([technicianId, date])
}

model AddOn {
  id           String        @id @default(uuid())
  name         String        @unique
  price        Float
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  transactions Transaction[]
  posServiceId Int
}

model Invoice {
  id            String      @id @default(uuid())
  transaction   Transaction @relation(fields: [transactionId], references: [id])
  transactionId String      @unique
  totalAmount   Float
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model Sales {
  id                  String                 @id @default(uuid())
  firstName           String
  lastName            String
  mobileNumber        String?                @unique
  isActive            Boolean                @default(true)
  createdAt           DateTime               @default(now())
  updatedAt           DateTime               @updatedAt
  salesRecords        SalesRecord[]
}


model SalesRecord {
  id            String      @id @default(uuid())
  transaction   Transaction @relation(fields: [transactionId], references: [id])
  transactionId String
  seller        user?       @relation(fields: [sellerId], references: [id])
  sellerId      String?
  salesPerson   Sales?      @relation(fields: [salesPersonId], references: [id])
  salesPersonId String?
  saleType      SaleType    // SERVICE or ADDON
  itemId        String      // serviceId or addOnId
  itemName      String      // service name or add-on name
  price         Float       // price at time of sale
  quantity      Int         @default(1) // for add-ons that might have quantity
  soldAt        DateTime    @default(now())
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@index([transactionId])
  @@index([sellerId, soldAt])
  @@index([salesPersonId, soldAt])
  @@index([saleType, soldAt])
}

model AuditLog {
  id            String             @id @default(uuid())
  technician    Technician         @relation(fields: [technicianId], references: [id])
  technicianId  String
  action        AuditAction
  timestamp     DateTime           @default(now())
  transaction   Transaction?       @relation(fields: [transactionId], references: [id])
  transactionId String?
  phase         TransactionStatus?
  metadata      Json?
  description   String?
}

model PosOrder {
  id            String      @id @default(uuid())
  transaction   Transaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)
  transactionId String      @unique
  data          Json        // Store the complete response data as JSON
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model TechnicianAssignment {
  id            String            @id @default(uuid())
  technician    Technician        @relation(fields: [technicianId], references: [id])
  technicianId  String
  transaction   Transaction       @relation(fields: [transactionId], references: [id])
  transactionId String
  phase         TransactionStatus
  assignedAt    DateTime          @default(now())
  startedAt     DateTime?
  completedAt   DateTime?
  isActive      Boolean           @default(true)
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt

  @@unique([technicianId, transactionId, phase])
}

enum TransactionStatus {
  scheduled
  stageOne
  stageTwo
  stageThree
  completed
  cancelled
}

enum UserRole {
  ADMIN
  SUPERVISOR
}

enum SaleType {
  SERVICE
  ADDON
}

enum CarType {
  Bike
  Sedan
  Crossover
  SUV
  VAN
}

enum ShiftType {
  REGULAR
  WEEKEND
  HOLIDAY
  OVERTIME
}

enum AuditAction {
  SHIFT_STARTED
  SHIFT_ENDED
  BREAK_STARTED
  BREAK_ENDED
  OVERTIME_STARTED
  OVERTIME_ENDED
  TRANSACTION_ASSIGNED
  TRANSACTION_STARTED
  TRANSACTION_COMPLETED
  PHASE_TRANSITION
  TECHNICIAN_CHANGED
}
