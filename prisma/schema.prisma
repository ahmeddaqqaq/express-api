generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model user {
  id           String   @id @default(uuid())
  name         String
  mobileNumber String   @unique
  password     String
  role         UserRole
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Image {
  id        String   @id @default(uuid())
  key       String   @unique
  url       String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  transactions Transaction[] @relation("TransactionImages")
}

model Customer {
  id           String        @id @default(uuid())
  fName        String
  lName        String
  mobileNumber String        @unique
  cars         Car[]
  count        Int           @default(0)
  isActive     Boolean       @default(true)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  transactions Transaction[]
}

model Car {
  id           String        @id @default(uuid())
  brand        Brand         @relation(fields: [brandId], references: [id])
  brandId      String
  customer     Customer      @relation(fields: [customerId], references: [id])
  customerId   String
  model        Model         @relation(fields: [modelId], references: [id])
  modelId      String
  plateNumber  String
  year         String?
  color        String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  transactions Transaction[]
}

model Brand {
  id        String   @id @default(uuid())
  name      String   @unique
  models    Model[]
  cars      Car[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  imageId   String?  @unique
}

model Model {
  id        String   @id @default(uuid())
  name      String
  brand     Brand    @relation(fields: [brandId], references: [id])
  brandId   String
  type      CarType  @default(Sedan)
  cars      Car[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([brandId, name])
}

model Transaction {
  id           String            @id @default(uuid())
  status       TransactionStatus @default(scheduled)
  customer     Customer          @relation(fields: [customerId], references: [id])
  customerId   String
  car          Car               @relation(fields: [carId], references: [id])
  carId        String
  service      Service           @relation(fields: [serviceId], references: [id])
  serviceId    String
  images       Image[]           @relation("TransactionImages")
  addOns       AddOn[]
  technicians  Technician[]
  invoice      Invoice?
  deliverTime  String?
  notes        String?
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  supervisor   Supervisor?       @relation(fields: [supervisorId], references: [id])
  supervisorId String?
}

model Service {
  id           String         @id @default(uuid())
  name         String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  transactions Transaction[]
  prices       ServicePrice[]
}

model ServicePrice {
  id        String   @id @default(uuid())
  service   Service  @relation(fields: [serviceId], references: [id])
  serviceId String
  carType   CarType
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([serviceId, carType])
}

model Technician {
  id           String        @id @default(uuid())
  status       Boolean       @default(true)
  fName        String
  lName        String
  startShift   DateTime?
  endShift     DateTime?
  startBreak   DateTime?
  endBreak     DateTime?
  transactions Transaction[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  auditLog     AuditLog[]
}

model AddOn {
  id           String        @id @default(uuid())
  name         String        @unique
  price        Float
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  transactions Transaction[]
}

model Invoice {
  id            String      @id @default(uuid())
  transaction   Transaction @relation(fields: [transactionId], references: [id])
  transactionId String      @unique
  totalAmount   Float
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model Supervisor {
  id           String        @id @default(uuid())
  firstName    String
  lastName     String
  transactions Transaction[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model AuditLog {
  id           String     @id @default(uuid())
  technician   Technician @relation(fields: [technicianId], references: [id])
  technicianId String
  action       String
  timestamp    DateTime   @default(now())
}

enum TransactionStatus {
  scheduled
  stageOne
  stageTwo
  stageThree
  completed
  cancelled
}

enum UserRole {
  ADMIN
  SUPERVISOR
}

enum CarType {
  Bike
  Sedan
  Crossover
  SUV
  VAN
}
